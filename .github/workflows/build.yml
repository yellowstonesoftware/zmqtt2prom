name: CI/CD workflow

on:
  pull_request:
  push:
    branches: [main]

jobs:
  build:
    name: Swift ${{ matrix.swift }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        swift: ["6.1.0"]
        test-args: [""]

    steps:
      - uses: swift-actions/setup-swift@v2
        with:
          swift-version: ${{ matrix.swift }}

      - name: Get swift version
        run: swift --version    

      - name: Check out
        uses: actions/checkout@v4

      - name: Install Apple certificate
        if: matrix.os == 'macos-latest'
        env:
          APPLE_SIGNING_CERTIFICATE_BASE64: ${{ secrets.APPLE_SIGNING_CERTIFICATE_BASE64 }}
          APPLE_SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_SIGNING_CERTIFICATE_PASSWORD }}
          APPLE_KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # create certificate file from base64 secret
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo -n "$APPLE_SIGNING_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$APPLE_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$APPLE_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$APPLE_SIGNING_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$APPLE_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Build (macOS ARM64)
        if: matrix.os == 'macos-latest'
        run: swift build -c release --arch arm64

      - name: Build (linux)
        if: matrix.os == 'ubuntu-latest'
        run: swift build -c release

      - name: Test
        run: swift test ${{ matrix.test-args }}

      - name: Sign & Notarize binary
        if: matrix.os == 'macos-latest'
        run: |
          cp .build/release/zmqtt2prom .
          codesign --sign "$APPLE_CERT_CN" --options=runtime --timestamp zmqtt2prom 
          zip zmqtt2prom_macos_arm64.zip zmqtt2prom
          xcrun notarytool submit zmqtt2prom.zip --apple-id $APPLE_DEVELOPER_USER_ID --team-id $APPLE_DEVELOPER_TEAM_ID --password $APPLE_APP_SPECIFIC_PASSWORD --wait
        env:
          APPLE_DEVELOPER_USER_ID: ${{ secrets.APPLE_DEVELOPER_USER_ID }}
          APPLE_DEVELOPER_TEAM_ID: ${{ secrets.APPLE_DEVELOPER_TEAM_ID }}
          APPLE_CERT_CN: ${{ secrets.APPLE_CERT_CN }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}

      - name: Package (Linux)
        if: matrix.os == 'ubuntu-latest' && github.ref == 'refs/heads/main'
        run: zip zmqtt2prom_linux.zip .build/release/zmqtt2prom

      - name: Upload artifact (macOS ARM64)
        if: matrix.os == 'macos-latest' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.arch }}-build
          path: zmqtt2prom_macos_arm64.zip

      - name: Upload artifact (linux)
        if: matrix.os == 'ubuntu-latest' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.arch }}-build
          path: zmqtt2prom_linux.zip            